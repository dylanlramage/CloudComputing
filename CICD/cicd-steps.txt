CI/CD workflow using Jenkins and Bitbucket
-------------------------------------------

Setup:
------
Conceptually you need two different machines for this exercise.

Machine 1: This machine/VM will be your developer workspace where you are developing your application.
Machine 2: This VM will be your Jenkins server (CI/CD server)

Machine 1 can be your personal Laptop or a cloud VM.

Machine 2 *has* to be a cloud VM (such as a EC2 instance).

Make sure you allow TCP traffic to port 8080 on your VM instance.


A] Setup your developer workspace/Machine 1:
--------------------------------------------
1) Install Google Cloud CLI
   - sudo apt-get install python
   - curl https://sdk.cloud.google.com | bash
   - log out and log back in

2) Configure authentication for gcloud CLI. We need this step to create Google Cloud SQL instance and static IP.
   - gcloud auth login --> Follow the prompts (you will have to open browser window and paste the generated link,
       then paste the generated code in the verification field in your console.)
   - Create Project in Google Cloud Console --> Note down the Project ID. Remember that Project ID is different than the Project's Name.
       You will need Project ID in subsequent steps.
   - export PROJECT_ID=<Project-ID-from-previous-step>
   - export CLOUDSDK_COMPUTE_ZONE=us-central1-b
   - gcloud config set project ${PROJECT_ID}

3) Create a Google Cloud SQL instance
   - gcloud sql instances create instance1 --tier=db-f1-micro --authorized-networks=0.0.0.0/0

4) Create testdb database on the Cloud SQL instance
   - gcloud sql instances list
   - Once the Cloud SQL instance is in 'RUNNABLE' state, do following steps:
     - gcloud sql users set-password root --host % --instance instance1 --password 'testpass123!@#'
     - sudo apt-get install mysql-client
     - mysql -h <IP-address-of-SQL-Instance> --user=root --password='testpass123!@#'
     - mysql>create database testdb;
     - mysql>quit;

5) Create a static IP address for our application
   - gcloud compute addresses create greetings-ip --global

6) Create GKE cluster
   - gcloud container clusters create --machine-type=g1-small --num-nodes=1 testcluster1


7) Create your Bitbucket repository named "assignment4"
   - Make it Private
   - Generate a SSH Key pair for your developer workspace VM 
     and add it to your Bitbucket account
     - Account -> Bitbucket settings -> SSH keys -> Add key
        - On your machine generate ssh key as follows (steps given for Linux/Unix):
        - ssh-keygen
        - It is fine if you provide an empty passphrase
	- more ~/.ssh/id_rsa.pub
	- Copy the key and paste it in the "Add Key" box in Bitbucket.
        - When you paste the key, make sure that there are no extra spaces between the characters.
          The pasting operation will unevenly break the key into multiple lines. Find such lines
          and remove any extra spaces by hitting the Backspace key.
          - Best approach is to copy and paste each line without leaving any spaces when you paste a line.

8) Download Sample CI/CD project
   - git clone https://github.com/devdattakulkarni/CloudComputing
   - cd CloudComputing/CICD/greetings
   - Edit greetings-deployment.yaml and set the environment variables corresponding to
     the Google Cloud SQL instance
     (Note: In the image tag don't include any version.
      i.e.: Define your image tag as: "gcr.io/<project-id>/greetings:latest" and NOT as
      "gcr.io/<project-id>/greetings:v1")
   - Save and commit the modifications:
     - git add
     - git commit

   - Add a remote for your Bitbucket repository and Push the sample CI/CD project to that remote
     - cd ../../
     - git remote add origin1 git@bitbucket.org:<your-bitbucket-username>/assignment4.git
     - git push origin1 master



B] Setup your Jenkins Server/Machine 2:
--------------------------------------
1) Jenkins Server Installation preparation:
   - Login to your Cloud VM instance (Machine2)
   - Install Java (JRE and JDK)
     - sudo apt-add-repository ppa:openjdk-r/ppa
     - sudo apt-get update
     - sudo apt-get install -y openjdk-8-jre openjdk-8-jdk wget
   - Install Google Cloud CLI (this is needed for Jenkins Server to authenticate to GCP)
     - sudo apt-get install python
     - curl https://sdk.cloud.google.com | bash
   - Install Docker (this is needed for Jenkins Server to build container image)
     - git clone https://github.com/devdattakulkarni/CloudComputing.git
     - cd CloudComputing/Containers/Kubernetes-examples/GCP/
     - ./install-docker-ubuntu.sh 
   - Exit from Cloud VM instance
     - SSH back into Cloud VM instance
   - Install Kubectl (this is needed for Jenkins Server to deploy to GKE)
     - gcloud components install kubectl

   - Generate a SSH Key pair for the Jenkins Server and add it to your Bitbucket account
     (this is needed so that Jenkins Server can clone your github repo)
     - Account -> Settings -> Add Key
      - You can either generate an SSH key or add an existing key if you have one
        - ssh-keygen
        - It is fine if you provide an empty passphrase
	- more ~/.ssh/id_rsa.pub
	- Copy the key and paste it in the "Add Key" box in Bitbucket.
        - When you paste the key, make sure that there are no extra spaces between the characters.
          The pasting operation will unevenly break the key into multiple lines. Find such lines
          and remove any extra spaces by hitting the Backspace key.

    - Disable Host key verification:
      - create .ssh/config file
      - Include following lines in it:
        Host *
            StrictHostKeyChecking no

2) Configure authentication for gcloud CLI
   - gcloud auth login --> Follow the prompts (you will have to open browser window and paste the generated link,
       then paste the generated code in the verification field in your console.)
   - Create Project in Google Cloud Console --> Note down the Project ID. Remember that Project ID is different than the Project's Name.
       You will need Project ID in subsequent steps.
   - export PROJECT_ID=<Project-ID-from-previous-step>
   - export CLOUDSDK_COMPUTE_ZONE=us-central1-b
   - gcloud config set project ${PROJECT_ID}


3) Configure kubectl to connect to your GKE cluster
   - gcloud container clusters get-credentials testcluster1

4) Download and Start Jenkins Server:
   - wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war
   - nohup java -jar jenkins.war --httpPort=8080  &
     -> This will start Jenkins process on port 8080

5) Configure Jenkins Server
   - Point your browser to the DNS name of the Jenkins Server at port 8080
     https://<DNS-of-Jenkins-Server>:8080/
   - Enter admin password from $HOME/.jenkins/secrets/initialAdminPassword
   - Choose Install suggested plugins option

6) Once Jenkins starts up do following:
   6.1) Login as admin user
        - Password is stored in: $HOME/.jenkins/secrets/initialAdminPassword
   6.2) Set the path in Jenkins for Git
        Jenkins -> Manage Jenkins -> Configure System -> Global Properties
        - Check Tool Locations
        - List of tool locations -> Add 
        - Set the path of Git from your VM
          (You can find the path by running 'which git' on VM)
        - Save
   6.3) Install the Post build task Plugin and Bitbucket Plugin
        Jenkins -> Manage Jenkins -> Manage Plugins
	- In Available tab, search "Post build task" and select
	- In Available tab, search "Bitbucket" and select
	  (Note: There are several Bitbucket plugins -- you want to choose whose
           name contains only the word "Bitbucket" and nothing else)
	- Choose Install without restarting option
        - Bitbucket plugin will be used to clone Bitbucket repo
        - Post build task plugin will be used to perform build and deploy tasks


C] Add a WebHook to your Bitbucket repository

1) Go to your Bitbucket repository -> Settings -> Webhooks -> Add webhook
        - http://<DNS-of-Jenkins-server>:8080/bitbucket-hook/
          (Note: The trailing slash '/' is important. Don't forget that!!)
        - Make Status as "Active"
        - Check "Skip certificate verification"
        - Triggers -> Choose from a full list of triggers
          - Select following: 
            - Repository->Push, Pull Request->Created, Updated, Comment created, Comment updated, Comment deleted
              Issue->Created, Issue->Updated, Issue->Comment Created
         
2) Set up a Jenkins Job on Jenkins VM
   2.1) Make sure your Bitbucket repository ("assignment4") is Public
        - This will make it possible to be cloned by Jenkins.
   2.2) Jenkins -> New Item -> Give name -> Select Freestyle project
        -> Source Code Management -> Git -> Give Bitbucket Repository URL (using git protocol)
	(e.g.: git@bitbucket.org:devdattakulkarni/assignment4.git)
        -> Leave Branches to build as empty
   2.3) Build Triggers
        -> Choose "Build when a change is pushed to BitBucket"
   2.4) Buid Section -> Add a build step -> Execute Shell script
        -> In the Execute shell Command section:
           - Add contents of build-steps.txt 
             - Notes:
               - First modify build-steps.txt to use your GCP Project ID
               - Make sure that the image tag that use here is what you defined 
                 in deployment.yaml (Part A, step 8)
   2.5) In Post-build Actions
        -> Add post-build action -> Post build task
          -> Log text "SUCCESS" -> Operation "-- OR --"
           -> In the Tasks -> Script section:
	      - Add contents of deploy-steps.txt (modify the steps as required)
   2.6) Save


CI/CD Experiment:
-----------------
1) Open the Jenkins URL in your browser and navigate to the job

2) On Machine 1 (developer workspace) make changes to your code and push the code:
   - Modify index.html
   - git add
   - git commit
   - git push origin1 master

3) In the Jenkins Job you should see a new build triggered (visible under "Build History")
   - Select the Build
   - Go to Console Output
   - Verify that the build and deploy steps have been executed

4) On Machine 2 (Jenkins server):
   - kubectl get ingress
     - Check the AGE field. It usually takes 7/8 minutes before the changes are reflected
       on the Ingress IP address
     - Navigate to the IP address and verify that your changes are visible
     (Note: It may take 7/8 minutes before the ingress filtering routes will take effect
      and your changes are visible.)

6) Repeat steps 2-3-4 with different changes to index.html




Kubernetes YAML files:
----------------------
1) greetings-deployment.yaml
   -> Environment variables need to be set with appropriate Google Cloud SQL instance details

2) greetings-ingress.yaml
   -> Contains configuration for the Global IP address that we create in Part A step 5
   



Clean up:
---------
From Google Cloud Console:
- Delete Kubernetes Cluster
- Delete Google Cloud SQL Instance
- Delete GCR artifacts from Google Cloud Console (Storage)

Delete the Static IP address using gcloud CLI:
- gcloud compute addresses delete greetings-ip --global



Troubleshooting:
----------------
1) Restarting Jenkins:
   - On Machine 2 find out Jenkins process
     - ps -eaf | grep java
     - kill <process-id>
   - Re-run Jenkins using the java command (Part B step 4)

2) Jenkins workspace
   - On Jenkins Server at $HOME/.jenkins/workspace
   - This is the location where repository is cloned corresponding to Jenkins Jobs




Reference:
-----------
- https://cloud.google.com/kubernetes-engine/docs/tutorials/http-balancer
- https://blog.terrenceryan.com/index.php/making-kubernetes-ip-addresses-static-on-google-container-engine/
- http://ec2-34-212-126-125.us-west-2.compute.amazonaws.com:8080/bitbucket-hook/
